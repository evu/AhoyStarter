<?php/** * Add any data management or wordpress extending funcitons here *///convert date to Twitter style time agofunction date_timeago($time){	$today = time();	$createdday = strtotime($time);	$datediff = abs($today - $createdday);	$result = "";	$years = floor($datediff / (365 * 60 * 60 * 24));	$months = floor(($datediff - $years * 365 * 60 * 60 * 24) / (30 * 60 * 60 * 24));	$days = floor(($datediff - $years * 365 * 60 * 60 * 24 - $months * 30 * 60 * 60 * 24) / (60 * 60 * 24));	$hours = floor($datediff / 3600);	$minutes = floor($datediff / 60);	$seconds = floor($datediff);	//year checker  	if ($result == "") {		if ($years > 1)			$result = $years . " years ago";		elseif ($years == 1)			$result = $years . " year ago";	}	//month checker  	if ($result == "") {		if ($months > 1)			$result = $months . " months ago";		elseif ($months == 1)			$result = $months . " month ago";	}	//month checker  	if ($result == "") {		if ($days > 1)			$result = $days . " days ago";		elseif ($days == 1)			$result = $days . " day ago";	}	//hour checker  	if ($result == "") {		if ($hours > 1)			$result = $hours . " hours ago";		elseif ($hours == 1)			$result = $hours . " hour ago";	}	//minutes checker  	if ($result == "") {		if ($minutes > 1)			$result = $minutes . " minutes ago";		elseif ($minutes == 1)			$result = $minutes . " minute ago";	}	//seconds checker  	if ($result == "") {		if ($seconds > 1)			$result = $seconds . " seconds ago";		elseif ($seconds == 1)			$result = $seconds . " second ago";	}	return $result;}//bank holiday checkerfunction get_bh($day, $month, $year) {    if ($month == 12 && $day == 25)    {        return 1; //Xmas    }    if ($month == 12 && $day == 26)    {        return 1; //Boxing    }    if ($month == 5 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) == 1) && $day <=7) {        return 1;    } //May Day    $c = floor($year/100);    $n = $year-19*floor($year/19);    $k = floor(($c-17)/25);    $i = $c-floor($c/4)-floor(($c-$k)/3)+19*$n+15;    $i = $i-30*floor($i/30);    $i = $i-floor($i/28)*(1-floor($i/28))*floor(29/($i+1))*(floor(21-$n)/11);    $j = $year+floor($year/4)+$i+2-$c+floor($c/4);    $j = $j-7*floor($j/7);    $l = $i-$j;    $m = 3+floor(($l+40)/44);    $d = $l+28-31*floor($m/4);    if ($month == $m && $day == $d + 1) {        return 1; //Easter Monday    }    if ($month == $m && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) == 5) && $day <= $d && $day > $d - 7){        return 1; //Good Friday    }    if ($month == 1 && $day == 1 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) != 6) && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) != 0)){        return 1; //New Year Day    } elseif ($month == 1 && $day == 2 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) != 0) && (jddayofweek(cal_to_jd(CAL_GREGORIAN, 1, 1, $year), 0) == 0)){        return 1;    } elseif ($month == 1 && $day == 3 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, 2, $year), 0) == 0) && (jddayofweek(cal_to_jd(CAL_GREGORIAN, 1, 1, $year), 0) == 6)){        return 1;    }    if ($month == 5 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) == 1) && $day >= 25)    {        return 1;    }    if ($month == 8 && (jddayofweek(cal_to_jd(CAL_GREGORIAN, $month, $day, $year), 0) == 1) && $day >= 25)    {        return 1;    }    return false;}//Convert string into hyphenated stringfunction escape_id($string){	$string = str_replace(' ', '-', $string);	$string = preg_replace('/[^A-Za-z0-9\-]/', '', $string);	return $string;}//Get the current page urlfunction curPageURL(){	$pageURL = 'http';	if ($_SERVER["HTTPS"] == "on") {		$pageURL .= "s";	}	$pageURL .= "://";	if ($_SERVER["SERVER_PORT"] != "80") {		$pageURL .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"] . $_SERVER["REQUEST_URI"];	} else {		$pageURL .= $_SERVER["SERVER_NAME"] . $_SERVER["REQUEST_URI"];	}	return $pageURL;}//Return the atachment ID of an imagefunction get_attachment_id_from_src ($image_src) {	global $wpdb;	$query 	= "SELECT ID FROM {$wpdb->posts} WHERE guid='$image_src'";	$id 	= $wpdb->get_var($query);	return $id;}//Gets an image thumbnail from attachment IDfunction get_attachment_image_size_from_src( $url, $size = 'large' ){	$image_id 		= get_attachment_id_from_src( $url );	$image_object 	= wp_get_attachment_image_src( $image_id, $size );	return $image_object[0];}//check if a user has a specific role.function user_has_role($user_id, $role){	$user = new WP_User($user_id);	if (in_array($role, $user->roles)) {		return true;	}	return false;}//Return clean site urlfunction clean_site_url(){	$permalink = get_site_url();	$find_h = '#^http(s)?://#';	$find_w = '/^www\./';	$replace = '';	$output = preg_replace($find_h, $replace, $permalink);	$output = preg_replace($find_w, $replace, $output);	$output = rtrim($output, "/");	return $output;}//Returns a relative URL without the blog_urlfunction get_stripped_url( $url ){	$stripped_url = str_replace( get_site_url(), '', $url );	if (substr($stripped_url, 0, 1) != '/') {		return '/'.$stripped_url;	}	return $stripped_url;}//Generates a readable random stringfunction generate_readable_rand($length = 6){	$conso		= array("b","c","d","f","g","h","j","k","l","m","n","p","r","s","t","v","w","x","y","z");	$vocal		= array("a","e","i","o","u");	$rand		= "";	srand ((double)microtime()*1000000);	$max 		= $length/2;	for($i=1; $i<=$max; $i++)	{		$rand .= $conso[rand(0,19)];		$rand .= $vocal[rand(0,4)];	}	return $rand;}//Generates a random stringfunction generate_rand($length = 6){	$c		= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";	$rand 	= '';	srand((double)microtime()*1000000);	for($i=0; $i<$length; $i++)	{		$rand .= $c[rand()%strlen($c)];	}	return $rand;}//Gets IP address of userfunction get_real_ip_addr(){	if (!empty($_SERVER['HTTP_CLIENT_IP']))	{		$ip = $_SERVER['HTTP_CLIENT_IP'];	}	elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR']))	//to check ip is pass from proxy	{		$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];	}	else	{		$ip=$_SERVER['REMOTE_ADDR'];	}	return $ip;}//Force downloadfunction force_download($file){	if ((isset($file))&&(file_exists($file)))	{		header("Content-length: ".filesize($file));		header('Content-Type: application/octet-stream');		header('Content-Disposition: attachment; filename="' . $file . '"');		readfile("$file");	} else	{		echo "No file selected";	}}//Detect is request is ajaxfunction check_ajax(){	if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'){		return true;	}	return false;}//Denys direct access to filesfunction deny_direct(){	if(!defined('ABSPATH')){		die('You are not allowed to call this page directly.');		@header('Content-Type:'.get_option('html_type').';charset='.get_option('blog_charset'));	}}?>